{"version":3,"file":"CSSRuleValidatorHelper.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/CSSRuleValidatorHelper.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,QAAgB,EAAE,KAAc,EAAU,EAAE;IACtF,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KACpC;IACD,OAAO,wDAAwD,GAAG,QAAQ,GAAG,WAAW,GAAG,KAAK,GAAG,SAAS,CAAC;AAC/G,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,QAAgB,EAAU,EAAE;IAC5D,OAAO,wDAAwD,GAAG,QAAQ,GAAG,gBAAgB,CAAC;AAChG,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,QAAgB,EAAU,EAAE;IAC7D,OAAO,iCAAiC,GAAG,QAAQ,GAAG,SAAS,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,cAAoC,EAAW,EAAE;IAC/E,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IACD,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC9C,OAAO,OAAO,KAAK,MAAM,IAAI,OAAO,KAAK,aAAa,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,cAAoC,EAAW,EAAE;IAC/E,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IACD,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC9C,OAAO,OAAO,KAAK,MAAM,IAAI,OAAO,KAAK,aAAa,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,cAAoC,EAAW,EAAE;IACnF,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IACD,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACvD,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAEvD,OAAO,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,MAAM,CAAC;AAC1D,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const buildPropertyDefinitionText = (property: string, value?: string): string => {\n  if (value === undefined) {\n    return buildPropertyName(property);\n  }\n  return '<code class=\"unbreakable-text\"><span class=\"property\">' + property + '</span>: ' + value + '</code>';\n};\n\nexport const buildPropertyName = (property: string): string => {\n  return '<code class=\"unbreakable-text\"><span class=\"property\">' + property + '</span></code>';\n};\n\nexport const buildPropertyValue = (property: string): string => {\n  return '<code class=\"unbreakable-text\">' + property + '</code>';\n};\n\nexport const isFlexContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const display = computedStyles.get('display');\n  return display === 'flex' || display === 'inline-flex';\n};\n\nexport const isGridContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const display = computedStyles.get('display');\n  return display === 'grid' || display === 'inline-grid';\n};\n\nexport const isMulticolContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const columnWidth = computedStyles.get('column-width');\n  const columnCount = computedStyles.get('column-count');\n\n  return columnWidth !== 'auto' || columnCount !== 'auto';\n};\n"]}